#!/usr/bin/env python
#
# Copyright (c) 2016 Dmitry Marakasov <amdmi3@amdmi3.ru>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function
import argparse
import os
import ntpath
import re
import sys

def GetRenamedFilename(path, args_dict):
    dir, file = ntpath.split(path)

    match = re.match('GOPR(\d{4})(\..*)', file)
    if match:
        return os.path.join(dir, '%s%04d_%02d%s' % (args_dict['prefix'], int(match.group(1)), 0, match.group(2)))

    match = re.match('GP(\d{2})(\d{4})(\..*)', file)
    if match:
        return os.path.join(dir, '%s%04d_%02d%s' % (args_dict['prefix'], int(match.group(2)), int(match.group(1)), match.group(3)))

    return path

def TryRename(path, args_dict):
    target_path = GetRenamedFilename(path, args_dict)

    if target_path != path:
        if args_dict['dry_run'] or args_dict['verbose']:
            print('%s -> %s' % (path, target_path), file=sys.stderr)
        if os.path.exists(target_path) and not args_dict['force']:
            raise RuntimeError('target path %s exists' % target_path)
        if not args_dict['dry_run']:
            os.rename(path, target_path)

def Process(path, args_dict):
    if os.path.isfile(path):
        TryRename(path, args_dict)
    elif os.path.isdir(path):
        for entry in os.listdir(path):
            if entry == '.' or entry == '..':
                pass
            elif os.path.isfile(os.path.join(path, entry)):
                TryRename(os.path.join(path, entry), args_dict)
            elif args_dict['recursive'] and os.path.isdir(os.path.join(path, entry)):
                Process(os.path.join(path, entry), args_dict)

def Main():
    parser = argparse.ArgumentParser(description='Goes through files or directories specified on command line and renames files produced by GoPro cameras in a more usable and sortable way')
    parser.add_argument('-n', '--dry-run', action='store_true', help='do not actually rename anything')
    parser.add_argument('-f', '--force', action='store_true', help='rename even if target file exists')
    parser.add_argument('-v', '--verbose', action='store_true', help='print actions to stderr')
    parser.add_argument('-r', '-R', '--recursive', action='store_true', help='process subdirectories recursively')
    parser.add_argument('-p', '--prefix', nargs='?', default='GoPro_', help='prefix for renamed files')
    parser.add_argument('paths', metavar='path', nargs='+', help='file or directory to process')

    args = parser.parse_args()
    args_dict = vars(args)
    print(args_dict)

    for path in args.paths:
        Process(path, args_dict)
    return 0

if __name__ == '__main__':
    os.sys.exit(Main())
